/*
 * Part of the Java Image Processing Cookbook, please see
 * http://www.lac.inpe.br/~rafael.santos/JIPCookbook/index.jsp
 * for information on usage and distribution.
 * Rafael Santos (rafael.santos@lac.inpe.br)
 */
package tutorials.simpleclassifier;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.TreeMap;

import javax.imageio.ImageIO;

/**
 * This application creates signatures for each class for a minimum distance classifier.
 * Please see 
 * http://www.lac.inpe.br/~rafael.santos/JIPCookbook 
 * for more information on the files and formats used in this class.
 */
public final class CreateMinimumDistanceSignatures
  {
 /**
  * The application entry point. We must pass three parameters: the original
  * image file name, the name of the file with the description of the classes,
  * and the name of the file with the coordinates for the samples.
  * @throws IOException 
  */
  public static void main(String[] args) throws IOException
    {
    // Check parameters names.
    if (args.length != 3)
      {
      System.err.println("Must pass three command-line parameters to this application:");
      System.err.println(" - The original image (from which samples will be extracted;");
      System.err.println(" - The file with the classes names and colors");
      System.err.println(" - The file with the samples coordinates");
      System.exit(1);
      }
    // Open the original image.
    BufferedImage input = ImageIO.read(new File(args[0]));
    // Read the classes description file. 
    BufferedReader br = new BufferedReader(new FileReader(args[1]));
    // Store the classes color in a map.
    TreeMap<Integer,Color> classMap = new TreeMap<Integer, Color>();
    while(true)
      {
      String line = br.readLine(); 
      if (line == null) break;
      if (line.startsWith("#")) continue;
      StringTokenizer st = new StringTokenizer(line);
      if (st.countTokens() < 4) continue;
      int classId = Integer.parseInt(st.nextToken());
      int r = Integer.parseInt(st.nextToken());
      int g = Integer.parseInt(st.nextToken());
      int b = Integer.parseInt(st.nextToken());
      classMap.put(classId,new Color(r,g,b));
      }
    br.close();
    // Create the structures to represent the signature for the minimum distance
    // classifier: the average value of the pixels in the samples for each class.
    TreeMap<Integer,double[]> avgMap = new TreeMap<Integer, double[]>();
    // We will also need to count the number of pixels in a class' samples.
    TreeMap<Integer,Integer> countMap = new TreeMap<Integer, Integer>();
    for(Integer classIndex:classMap.keySet())
      {
      avgMap.put(classIndex,new double[]{0,0,0}); 
      countMap.put(classIndex,0); 
      }
    // Open the file with the coordinates and get the pixels' values for those 
    // coordinates.
    br = new BufferedReader(new FileReader(args[2]));
    while(true)
      {
      String line = br.readLine(); 
      if (line == null) break;
      if (line.startsWith("#")) continue;
      StringTokenizer st = new StringTokenizer(line);
      if (st.countTokens() < 5) continue;
      int classId = Integer.parseInt(st.nextToken());
      int x = Integer.parseInt(st.nextToken());
      int y = Integer.parseInt(st.nextToken());
      int w = Integer.parseInt(st.nextToken());
      int h = Integer.parseInt(st.nextToken());
      Color c = classMap.get(classId);
      if (c != null) // We have a region!
        {
        double[] accum = avgMap.get(classId);
        int count = countMap.get(classId);
        // Let's get all pixels values in it.
        for(int row=0;row<=h;row++)
          for(int col=0;col<=w;col++)
            {
            int rgb = input.getRGB(x+col,y+row);
            int r = (int)((rgb&0x00FF0000)>>>16); // Red level
            int g = (int)((rgb&0x0000FF00)>>>8);  // Green level
            int b = (int) (rgb&0x000000FF);       // Blue level
            // Add them to the average value.
            accum[0] += r;  accum[1] += g;  accum[2] += b;
            count++;
            } 
        // Put the average and count values back on the map.
        avgMap.put(classId,accum);
        countMap.put(classId,count);
        }
      }
    br.close();
    // Write the average value vector, doing the actual averaging before.
    BufferedWriter bw = new BufferedWriter(new FileWriter("mindist_signatures.txt"));
    // In each line information for a class.
    for(Integer classId:classMap.keySet())
      {
      bw.write(classId+" ");
      double[] avg = avgMap.get(classId);
      int count = countMap.get(classId);
      bw.write(avg[0]/count+" "+avg[1]/count+" "+avg[2]/count+" ");
      bw.newLine();      
      }
    bw.close();
    }
  }
