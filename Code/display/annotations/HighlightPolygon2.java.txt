/*
 * Part of the Java Image Processing Cookbook, please see
 * http://www.lac.inpe.br/~rafael.santos/JIPCookbook.jsp
 * for information on usage and distribution.
 * Rafael Santos (rafael.santos@lac.inpe.br)
 */
package display.annotations;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;

/**
 * This class shows how to highlight a polygonal region in an image, using classes in 
 * the AWT package. This version also scales the region and center the polygon on it.
 * Please see the class HighlightPolygon for further information. 
 */
public class HighlightPolygon2
  {
  public static void main(String[] args) throws IOException
    {
    // We want to scale up the region and to have a margin around it.
    float scaleFactor = 5f;
    float margin = 40; // in pixels.
    // Open the image. 
    BufferedImage baseImage = ImageIO.read(new File("urbanova.png"));
    // These are the coordinates of the polygon we want to highlight. In a real world application 
    // we could read both data from files. 
    // These coordinates are stored in a text array so we need to parse them.
    String[] coordsText = new String[]{ 
        "619.22,443.90","615.28,446.32","620.00,451.00",
        "618.68,453.51","615.91,458.61","612.83,459.10",
        "609.49,459.63","600.01,451.21","597.00,449.00",
        "597.00,449.00","605.00,439.00","605.00,439.00",
        "601.17,434.68","604.21,432.22","607.00,428.00",
        "612.76,431.23","618.74,434.89","623.00,440.00"};
    // The polygons will be stored in instances of Path2D.Float. After we create an instance 
    // of Path2D.Float we must set its vertices -- the easiest way to do this is through the
    // moveTo(x,y) and lineTo(x,y) methods.
    Path2D.Float regionOfInterest = new Path2D.Float();
    // We must store the first X,Y coordinates so we can close the path, by creating a line
    // to the last point to the first one.
    boolean isFirst = true;
    double firstX=0,firstY=0;
    // For each of the X,Y coordinates, parse and store them on the Path2D.Float. 
    // We'll also calculate the region's center and bounding box.
    Point2D.Double ulCorner = new Point2D.Double(baseImage.getWidth(),baseImage.getHeight());
    Point2D.Double brCorner = new Point2D.Double(0,0);
    for(String s:coordsText)
      {
      String[] xy = s.split(",");
      double x = Double.parseDouble(xy[0]);
      double y = Double.parseDouble(xy[1]);
      if (isFirst) 
        { 
        regionOfInterest.moveTo(x,y); 
        firstX = x;
        firstY = y;
        isFirst = false; 
        }
      else { regionOfInterest.lineTo(x,y); }
      // Update coordinates for the bounding box.
      if (x < ulCorner.x) ulCorner.x = x;
      if (y < ulCorner.y) ulCorner.y = y;
      if (x > brCorner.x) brCorner.x = x;
      if (y > brCorner.y) brCorner.y = y;
      }
    // Close the path.
    regionOfInterest.lineTo(firstX,firstY);
    // Adjust the bounding box to include the margins.
    ulCorner.x -= margin;     ulCorner.y -= margin;
    brCorner.x += margin;     brCorner.y += margin;
    // We want the region to be inside of the image, so we must adjust it if parts of it are
    // outside the image -- let's calculate a delta value to adjust the shape later.
    Point2D.Double adjustment = new Point2D.Double();
    if (ulCorner.x < 0) 
      adjustment.x = -ulCorner.x;
    if (ulCorner.y < 0) 
      adjustment.y = -ulCorner.y;
    if (brCorner.x >= baseImage.getWidth()) 
      adjustment.x = (baseImage.getWidth()-brCorner.x);
    if (brCorner.y >= baseImage.getHeight()) 
      adjustment.y = (baseImage.getHeight()-brCorner.y);
    // Let's adjust the bounding box coordinates so they will be inside the image.
    ulCorner.setLocation(ulCorner.x+adjustment.x,ulCorner.y+adjustment.y);
    brCorner.setLocation(brCorner.x+adjustment.x,brCorner.y+adjustment.y);
    // Now we can create a scaled version of the original image with only the region inside
    // the bounding box. First we create the (empty) image.
    int regionWidth = (int)(brCorner.x-ulCorner.x);
    int regionHeight = (int)(brCorner.y-ulCorner.y);
    BufferedImage regionImage = 
      new BufferedImage((int)(regionWidth*scaleFactor),(int)(regionHeight*scaleFactor),
        BufferedImage.TYPE_INT_RGB);
    // To draw and paint the region of interest and path over it we need a graphic context, 
    // which we will get from the image itself. 
    Graphics2D g2d = (Graphics2D)regionImage.getGraphics();
    // We want antialiasing!
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    // Now we paint our region of interest over the empty image -- this call to drawImage will
    // automatically scale the region on the original image.  
    g2d.drawImage(baseImage,0,0,regionImage.getWidth(),regionImage.getHeight(),
        (int)ulCorner.x,(int)ulCorner.y,(int)brCorner.x,(int)brCorner.y,null);
    // Now we must paint the path over the region -- but the path's coordinates are on the
    // original image, so we must scale/translate them.
    AffineTransform at = new AffineTransform();
    at.scale(scaleFactor,scaleFactor);
    at.translate(-ulCorner.x,-ulCorner.y);
    // Store the transformed path in an instance of Shape.
    Shape transformedRegionOfInterest = regionOfInterest.createTransformedShape(at);
    // We have the path that define the region of interest. In order to dim the image regions
    // outside of this path we must create another path that contains everything but the 
    // region of interest.
    // First we create a path for the image region -- a rectangle with the image's coordinates.
    Path2D.Float pathForWholeImage = new Path2D.Float();
    pathForWholeImage.moveTo(0,0);
    pathForWholeImage.lineTo(regionImage.getWidth(),0);
    pathForWholeImage.lineTo(regionImage.getWidth(),regionImage.getHeight());
    pathForWholeImage.lineTo(0,regionImage.getHeight());
    pathForWholeImage.lineTo(0,0);
    // In order to use Constructive Area Geometry (CAG) operations we must use the Area class.
    // First we create an Area with the path for the whole image...
    Area wholeImage = new Area(pathForWholeImage);
    // .. then we subtract the region of interest from this Area.
    wholeImage.subtract(new Area(transformedRegionOfInterest));
    // Now we have a Path2D.Float for the region of interest and an Area for the rest of the image.    
    // Fill the rest of the image with a transparent (100/255) white.
    g2d.setColor(new Color(255,255,255,100));
    g2d.fill(wholeImage);
    // Draw the region of interest with a thick, almost opaque blue line.    
    g2d.setStroke(new BasicStroke(5f));
    g2d.setColor(new Color(0,0,255,200));
    g2d.draw(transformedRegionOfInterest);
    // Create a new Frame to show the results.
    JFrame frame = new JFrame();
    frame.setTitle("Highlighting image regions");
    // Create an ImageIcon/Label to show the image.
    ImageIcon icon = new ImageIcon(regionImage);
    JLabel label = new JLabel(icon);
    // Add it to the content pane.
    frame.getContentPane().add(new JScrollPane(label));
    // Set some GUI parameters.
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
    frame.pack();  
    frame.setVisible(true); 
    }
  
  }