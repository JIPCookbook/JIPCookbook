/*
 * Part of the Java Image Processing Cookbook, please see
 * http://www.lac.inpe.br/~rafael.santos/JIPCookbook.jsp
 * for information on usage and distribution.
 * Rafael Santos (rafael.santos@lac.inpe.br)
 */
package display.sampling;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;

import javax.swing.JComponent;

/**
 * This class display an array of instances of Color as three line plots. 
 */
public class DisplayRGBLinesComponent extends JComponent
  {
  // Some properties to help the automatic scaling.
  // Margins around the plot.
  protected static int leftMargin = 40;
  protected static int rightMargin = 10;
  protected static int topMargin = 25;
  protected static int bottomMargin = 25;
  // The array of Colors that will be plotted.
  protected Color[] colors;
  // The preferred dimensions for the component.
  protected int fullWidth,fullHeight;

 /**
  * The constructor for the class, which takes the preferred dimensions of
  * the component.
  */
  public DisplayRGBLinesComponent(int minw,int minh)
    {
    super();
    fullWidth = minw; fullHeight = minh;
    }

 /**
  * This method can be used to set the array (samples) to be displayed.
  */
  public void setColors(Color[] array)
    {
    this.colors = array;
    }

 /**
  * This method returns the preferred size for this component.
  */
  public Dimension getPreferredSize()
    {
    return new Dimension(fullWidth,fullHeight);
    }

 /**
  * This method will paint the component (background, markers and the data itself).
  */
  public void paintComponent(Graphics g)
    {
    Graphics2D g2d = (Graphics2D)g;
    // Determine height and width from component size and margins.
    int height = getSize().height - topMargin - bottomMargin;
    int width = getSize().width - leftMargin - rightMargin;
    FontMetrics fontMetrics = g2d.getFontMetrics();
    // Paint the background.
    g2d.setColor(Color.WHITE);
    g2d.fillRect(leftMargin,topMargin,width,height);
    // Draw some labels, right-aligned.
    g2d.setColor(Color.BLACK);
    int[] labels = new int[]{0,64,128,192,255};
    for(int l:labels)
      {
      String toDraw = String.format("% 3d",l);
      int alignOffset = fontMetrics.stringWidth(toDraw);
      g2d.drawString(toDraw,leftMargin-alignOffset-1,topMargin+(int)(height*(256-l)/255.));
      }
    // Draw the plot border.
    g2d.drawRect(leftMargin,topMargin,width,height);
    // Paint the array if it exists.
    if (colors != null)
      {
      // For each sample in the profile... this is less efficient than possible. 
      for(int a=1;a<colors.length;a++)
        {
        int x0,x1,r0,r1,g0,g1,b0,b1;
        x0 = (int)(width*(a-1)/colors.length);
        x1 = (int)(width*(a)/colors.length);
        // Gets the position of each color component. Red first.
        r0 = (int)(height*(colors[a-1].getRed()/255f));
        r1 = (int)(height*(colors[a].getRed()/255f));
        g2d.setColor(Color.RED);
        g2d.drawLine(leftMargin+1+x0,topMargin+height-r0,leftMargin+1+x1,topMargin+height-r1);
        // Then green.
        g0 = (int)(height*(colors[a-1].getGreen()/255f));
        g1 = (int)(height*(colors[a].getGreen()/255f));
        g2d.setColor(Color.GREEN);
        g2d.drawLine(leftMargin+1+x0,topMargin+height-g0,leftMargin+1+x1,topMargin+height-g1);
        // Then blue.
        b0 = (int)(height*(colors[a-1].getBlue()/255f));
        b1 = (int)(height*(colors[a].getBlue()/255f));
        g2d.setColor(Color.BLUE);
        g2d.drawLine(leftMargin+1+x0,topMargin+height-b0,leftMargin+1+x1,topMargin+height-b1);
        }  
      }
    }

  }