/*
 * Part of the Java Image Processing Cookbook, please see
 * http://www.lac.inpe.br/~rafael.santos/JIPCookbook.jsp
 * for information on usage and distribution.
 * Rafael Santos (rafael.santos@lac.inpe.br)
 */
package data.creation;

import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;

import javax.imageio.ImageIO;

/**
 * This application creates a gray level image using a LUT or colormap.
 * The JAI API is not used in this example.
 */
public class CreateGLImageNoJAIWithLUT
  {
  public static void main(String[] args) throws IOException 
    {
    // The color table, with 16 gray levels. 
    int nColors = 16;
    byte[] levels = new byte[nColors];
    for(int c=0;c<16;c++)
      levels[c] = (byte)(c*16);
    int width = 400; // Dimensions of the image
    int height = 400;
    // Let's create the IndexColorModel for this image. The first argument for the constructor
    // is the number of bits required for the color map. Since the image is a gray-level one, we 
    // use the same color map arrays.
    IndexColorModel colorModel = new IndexColorModel(4,nColors,levels,levels,levels);
    // Let's create a BufferedImage for an indexed color image.
    BufferedImage im = new BufferedImage(width,height,BufferedImage.TYPE_BYTE_INDEXED,colorModel);
    // We need its raster to set the pixels' values.
    WritableRaster raster = im.getRaster();
    // Put the pixels on the raster. We will make several small blocks with random gray levels.
    for(int h=0;h<height/10;h++)
      for(int w=0;w<width/10;w++)
        {
        int[] fill = new int[10*10]; // A block of pixels...
        Arrays.fill(fill,(int)(Math.random()*16));  // .. filled with one of the 16 colors.
        raster.setSamples(w*10,h*10,10,10,0,fill); 
        }
    // Store the image. Use PNG format, it is more flexible for indexed images.
    ImageIO.write(im,"PNG",new File("glpattern2.png"));
    }

  }