/*
 * Part of the Java Image Processing Cookbook, please see
 * http://www.lac.inpe.br/~rafael.santos/JIPCookbook.jsp
 * for information on usage and distribution.
 * Rafael Santos (rafael.santos@lac.inpe.br)
 */
package data.creation;

import java.awt.image.DataBuffer;
import java.awt.image.SampleModel;
import java.awt.image.WritableRaster;

import javax.media.jai.JAI;
import javax.media.jai.RasterFactory;
import javax.media.jai.TiledImage;

/**
 * This application creates a gray level image using the Java Advanced Imaging API.
 * The pixels on this image will be floating point values.
 */
public class CreateGLFPImageJAI
  {
  public static void main(String[] args)
    {
    // The image dimensions.
    int width = 512; int height = 512;
    // We need a sample model for a floating point image.
    SampleModel sampleModel = 
      RasterFactory.createBandedSampleModel(DataBuffer.TYPE_FLOAT,width,height,1);
    // Create a TiledImage using the SampleModel.
    TiledImage tiledImage = new TiledImage(0,0,width,height,0,0,sampleModel,null);
    // Get a raster for the single tile.
    WritableRaster wr = tiledImage.getWritableTile(0,0);
    // Paint the pixels with a distance-like function (pixels may even be negative!)    
    for(int h=0;h<height;h++)
      for(int w=0;w<width;w++)
        {
        float dw = (w-width/2f);
        float dh = (h-height/2f);
        float function = (float)Math.sqrt(dw*dw+dh*dh); // Distance to the center.
        wr.setSample(w,h,0,function-32f); // Just to have negative pixels.
        }
    // Save the image on a file.
    JAI.create("filestore",tiledImage,"jaifp.tif","TIFF");
    }
  }